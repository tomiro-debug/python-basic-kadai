{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# **課題-学習したことを組み合わせてコードを書こう**\n",
        "\n",
        "\n",
        "名前(name)と年齢(age)の属性を持つHumanクラスを作成してください。\n",
        "\n",
        "Humanクラスには、以下の条件で標準出力(print)するcheck_adultメソッドを追加してください。\n",
        "\n",
        "ageが20以上の場合に大人であること\n",
        "\n",
        "そうでない場合に大人でないこと\n",
        "\n",
        "Humanクラスのインスタンスを複数生成してリストに追加し、リストの要素数分だけcheck_adultメソッドを呼び出してください。\n",
        "\n",
        "**合格基準**\n",
        "\n",
        "本課題の目標は、課題を通して以下の項目が身についているかどうか確認することです。\n",
        "\n",
        "本教材で学習したテクニックを組み合わせてコードを記述すること。\n",
        "そのため、以下の項目がすべて満たされていれば合格です。\n",
        "\n",
        "番号\t合格基準\n",
        "1\t本教材で学習した「リスト・ディクショナリ」「条件分岐」「繰り返し処理」「関数」「変数のスコープ」「クラス」を用いて、「課題の内容」の仕様通りのプログラムが記述されている"
      ],
      "metadata": {
        "id": "iNdeXoERaeQE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ThqmqBfvaZnc",
        "outputId": "ac4e7873-5a53-4184-e13a-5b9702ae7a95"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "山田は18歳なので大人ではありません。\n",
            "田中は20歳なので大人です。\n",
            "鈴木は19歳なので大人ではありません。\n",
            "高橋は31歳なので大人です。\n",
            "岡田は28歳なので大人です。\n"
          ]
        }
      ],
      "source": [
        "# クラスの作成\n",
        "class Human:\n",
        "    # コンストラクタを行い属性を定義する。\n",
        "    def __init__ (self, name, age):\n",
        "        self.name = name\n",
        "        self.age = age\n",
        "    # メソッドを定義する。\n",
        "    def check_adult(self):\n",
        "        if self.age >= 20:\n",
        "            check_adult_str = '歳なので大人です。'\n",
        "        else:\n",
        "            check_adult_str = '歳なので大人ではありません。'\n",
        "        print(f'{self.name}は{self.age}{check_adult_str}')\n",
        "\n",
        "# 関数1 Humanインスタンスのリストを作成する関数を作成する。\n",
        "def record_persons(na):\n",
        "    # ローカル変数を定義する。\n",
        "    # 空のリストpersons=[]を作成する。\n",
        "    persons = []\n",
        "\n",
        "    # 辞書を呼び出しながら空のリストぶHumanインスタンスを追加する。\n",
        "    for name, age in na.items():\n",
        "        persons += [Human(name,age)]\n",
        "\n",
        "    return persons\n",
        "    # ここまでがローカルスコープの範囲内\n",
        "\n",
        "# 関数2 Humanインスタンスのリストからcheck_adultを呼び出す関数を作成する。\n",
        "def check_adults(my_list):\n",
        "    # ローカル変数を定義する。\n",
        "    for i in my_list:\n",
        "        i.check_adult()\n",
        "        # ここまでがローカルスコープの範囲内\n",
        "\n",
        "# 辞書を作成する\n",
        "names_and_ages = {\"山田\": 18, \"田中\": 20,\"鈴木\": 19,\"高橋\": 31, \"岡田\": 28}\n",
        "\n",
        "# 関数1の実行\n",
        "# グローバルスコープの範囲内でグローバルスコープを使う\n",
        "record_person = record_persons(names_and_ages)\n",
        "\n",
        "# 関数2の実行\n",
        "# グローバルスコープの範囲内でグローバルスコープを使う\n",
        "check_adults(record_person)"
      ]
    }
  ]
}
